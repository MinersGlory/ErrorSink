# ╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ config.yml file of the ErrorSink plugin created by NLThijs48.                                                              ║
# ║ Github can be found at https://github.com/NLthijs48/ErrorSink.                                                             ║
# ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

# The DSN for the https://sentry.io project to send errors to
# Found under Project Settings in the 'Client Keys (DSN)' tab (use the non-public variant)
dsn: ""
# Name of the server reporting the error (useful if you have multiple servers using the same Sentry project)
# Defaults to the name specified in server.properties
serverName: ""

# MATCHING FOR RULES AND FILTERS:
#   Each 'rules:' and 'filters:' subsection has options to match events,
#   after this matching the event is dropped in case it is a filter,
#   and the rules get applied in case of a rule.
#   The following matching options can be used:
#     # Level of the event should be in the provided list
#     matchLevel: []
#     # Message of the event should match one of the regexes
#     matchMessage: []
#     # Exception of the event should match one of the regexes
#     matchException: []
#     # Name of the thread sending the event should match one of the regexes
#     matchThreadName: []
#     # Logger name should match one of the regexes
#     matchLoggerName: []
#
#   General notes:
#     - Each 'match<>' rule should match for the event to match
#     - Rules can either be a string, or a list of strings, of which only 1 needs to match
#     - All matching options except 'matchLevel' are regexes


# Filter and modify logging events (anything that is logged to latest.log is an event)
events:

  # Drop events that match any of the rules (to filter out spam and false positives)
  filters:
    info:
      # Drop info and debug messages
      matchLevel: ["INFO", "DEBUG", "TRACE", "OFF"]
    spam:
      matchMessage:
        # Spammy line-by-line exceptions coming from Skrips
        - "^#!#!"
        # One line warning message before printing actual exceptions from async threads
        - "^Exception in thread \"(Craft Scheduler )?Thread - \\d+\" $"
        # Vanilla/Spigot problems that cannot be fixed (could indicate lag though)
        - "^{player} moved too quickly!"
        - "^{player} moved wrongly!"
        # Spigot bug
        - "^handleDisconnection\\(\\) called twice$"
        # Statistic warnings because of upgrade to 1.12 (renamed to advancements)
        - "^Invalid statistic in"
    # Common error for old plugins (hard to fix sometimes)
    onlinePlayersException:
      matchException:
        - "java.lang.NoSuchMethodError: org.bukkit.Server.getOnlinePlayers\\(\\)\\[Lorg/bukkit/entity/Player"
        - "org.bukkit.Server._INVALID_getOnlinePlayers\\(\\)\\[Lorg/bukkit/entity/Player"
    # Offline mode warning (servers using BungeeCord will always have this)
    offlineModeWarnings:
      matchMessage:
        - "^\\*\\*\\*\\* SERVER IS RUNNING IN OFFLINE/INSECURE MODE!$"
        - "^The server will make no attempt to authenticate usernames. Beware.$"
        - "^While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.$"
        - "^Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.$"
        - "^To change this, set \"online-mode\" to \"true\" in the server.properties file.$"
        - "^Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.$"

  # Add information to events and/or change their properties
  rules:
    ###### Options for event rules
    #  # Shown at the top of events in Sentry, can easily be used to filter and segment them
    #  tags:
    #    minigame: "Paintball"
    # Data shown at the bottom of issues, cannot be filtered, but can provide detailed context
    #  data:
    #    Text: "A story"
    #    Multiline-text: |
    #      First line,
    #      also important line
    #    List: ["a", "b", "c"]
    #    Complex:
    #      A: "a"
    #      B:
    #        C: 123
    #        D: ["d", "e"]
    #  # String or array used to determine event grouping (events group together on an exact match)
    #  fingerprint:
    #  # Change the level of the event: FATAL, ERROR, WARNING, INFO, DEBUG
    #  level:
    #  # Set the environment (displayed as tag), meant for 'production', 'development', etc.
    #  environment:
    #  # Set the culprit (displayed as sub-header of issues on Sentry)
    #  culprit:
    #  # Set the logger (displayed after the sub-header of issues on Sentry)
    #  logger:
    #  # Set the release (displayed as tag and each version is displayed in the releases tab, version of ErrorSink by default)
    #  release:
    #  # Set the platform (displayed as tag)
    #  platform:
    #  # Bypass the filters and always report this event
    #  bypassFilters: <true|false>
    pluginAsTag:
      matchMessage: "^\\[{plugin}\\] .+"
      tags:
        Plugin: "{plugin}"
    # Ensures only 1 issue is created in Sentry for these messages (each of these is added as an event to the same issue)
    mergeFloatingTooLong:
      matchMessage: "^{player} was kicked for floating too long!$"
      fingerprint: "floatingTooLong"
      tags:
        Player: "{player}"


# Filter and change events when they are used as breadcrumb for events
# Events on sentry will show a list of events leading up to the event, which are called breadcrumbs
breadcrumbs:
  # Maximum number of entries that can appear in the breadcrumb
  # Sentry does not advice to use more than 100, and events exceeding the limits might get dropped
  maximumEntries: 50

  # Filter breadcrumb entries
  filters:

  # Change the appearance and data of breadcrumbs
  rules:
    ###### Options for breadcrumb rules
    #  # Type of the breadcrumb entry (determines the icon on Sentry)
    #  # Current useful values: default, debug, user, location, http (hides message), navigation
    #  type: "default"
    #  # Category of the breadcrumb (text shown at the start of the breadcrumb, around 16 characters maximum length)
    #  category: " "
    #  # Level, determining icon of the breadcrum: critical, error, warning, info, debug
    #  level: "error"
    #  # Change the message
    #  message: "abc"
    #  # Add extra data to the breadcrumb
    #  data:
    #    Planet: "Earth"

    # Show logins as navigation
    login:
      matchMessage: " logged in with entity id " # Should capture: username[/123.123.123.123:1234] logged in with entity id 123 at ([world]-123.456, 123.0, 123.456)
      category: ">>>"
      type: "navigation"
    # Show logouts as navigation
    logout:
      matchMessage: " lost connection: "
      category: "<<<"
      type: "navigation"
    # Show commands as user acvitiy
    commands:
      matchMessage: " issued server command: "
      category: "Command"
      type: "user"
    # Don't show console commands as user activity (revert previous rule)
    consoleCommands:
      matchMessage: "CONSOLE issued server command:"
      category: " "
      type: "default"
    # Plugin name as category
    category:
      matchMessage: "^\\[{plugin}\\] (?<message>.*)$"
      category: "{plugin}"
      message: "{message}"
    # Chat as user activity
    chat:
      matchThreadName: "Chat Thread"
      category: "Chat"
      type: "user"


# Regex parts can be defined here to use in the regexes of the rules and filters
# Use a part with {player}, the match can be used as replacement with the same variable (to insert it into event data)
parts:
  player: "[a-zA-Z0-9_]{1,16}"
  ip: "(?<ipv4>(?:[0-9]{1,3}\\.){3}[0-9]{1,3})|(?<ipv6>(?:[a-f0-9]{1,4}:){7}[a-f0-9]{1,4})"
  uuid: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
  plugin: "[a-zA-Z0-9-_]+"

# Print debug messages to the console.
debug: false
